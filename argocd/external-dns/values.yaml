external-dns:  

  global:
    imageRegistry: ""
    imagePullSecrets: []

  nameOverride: ""

  fullnameOverride: ""
  clusterDomain: cluster.local
  commonLabels: {}
  commonAnnotations: {}
  extraDeploy: []
  kubeVersion: ""
  watchReleaseNamespace: false
  
  image:
    registry: docker.io
    repository: bitnami/external-dns
    tag: 0.12.2-debian-11-r14
    digest: ""
    pullPolicy: Always
    pullSecrets: []

  hostAliases: []
  updateStrategy: {}
  command: []
  args: []
  sources:
    - service
    - ingress

  provider: cloudflare
  initContainers: []
  sidecars: []
  namespace: ""
  fqdnTemplates: []
  containerPorts:
    http: 7979
  combineFQDNAnnotation: false
  ignoreHostnameAnnotation: false
  publishInternalServices: false
  publishHostIP: false
  serviceTypeFilter: []
  
  cloudflare:
    secretName: "external-dns"
    proxied: true
  
  domainFilters: []
  excludeDomains: []
  regexDomainFilter: ""
  regexDomainExclusion: ""
  zoneNameFilters: []
  zoneIdFilters: []
  annotationFilter: ""
  labelFilter: ""
  dryRun: false
  triggerLoopOnEvent: false
  interval: "1m"
  logLevel: info
  logFormat: text
  policy: upsert-only
  registry: "txt"
  txtPrefix: ""
  txtSuffix: ""
  txtOwnerId: ""
  forceTxtOwnerId: false
  extraArgs: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  lifecycleHooks: {}
  schedulerName: ""
  topologySpreadConstraints: []
  replicaCount: 1
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podAnnotations: {}
  podLabels: {}
  priorityClassName: ""
  secretAnnotations: {}
  crd:
    create: false
    apiversion: ""
    kind: ""
  service:
    enabled: true
    type: ClusterIP
    ports:
      http: 7979
    nodePorts:
      http: ""
    clusterIP: ""
    externalIPs: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    extraPorts: []
    annotations: {}
    labels: {}
    sessionAffinity: None
    sessionAffinityConfig: {}

  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
    labels: {}

  rbac:
    create: true
    clusterRole: true
    apiVersion: v1
    pspEnabled: false

  containerSecurityContext: {}

  podSecurityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001

  resources:
    limits:
       cpu: 50m
       memory: 50Mi

    requests:
       cpu: 10m
       memory: 50Mi

  livenessProbe:
    enabled: true
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 2
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1

  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extraVolumes: []
  extraVolumeMounts: []
  podDisruptionBudget: {}

  metrics:

    enabled: false
    podAnnotations: {}
    serviceMonitor:
      enabled: false
      namespace: ""
      interval: ""
      scrapeTimeout: ""
      selector: {}
      metricRelabelings: []
      relabelings: []
      honorLabels: false
      labels: {}
      jobLabel: ""

    googlePodMonitor:
      enabled: false
      namespace: ""
      interval: "60s"
      endpoint: /metrics
  
